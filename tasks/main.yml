---
## https://github.com/ansible/ansible/issues/22397
## Ansible 2.3 generates a WARNING when using {{ }} in defaults variables of role
## this workarounds it until Ansible resolves the issue:
- set_fact:
    stop_non_migratable_vms: "{{ stop_non_migratable_vms }}"

- block:
    - name: Login to oVirt
      ovirt_auth_26:
        url: "{{ engine_url | default(lookup('env','OVIRT_URL')) | default(omit) }}"
        username: "{{ engine_user | default(lookup('env','OVIRT_USERNAME')) | default(omit) }}"
        hostname: "{{ engine_fqdn | default(lookup('env','OVIRT_HOSTNAME')) | default(omit) }}"
        password: "{{ engine_password | default(lookup('env','OVIRT_PASSWORD')) | default(omit) }}"
        ca_file: "{{ engine_cafile | default(lookup('env','OVIRT_CAFILE')) | default(omit) }}"
        token: "{{ engine_token | default(lookup('env','OVIRT_TOKEN')) | default(omit) }}"
        insecure: "{{ engine_insecure | default(true) }}"
      when: ovirt_auth is undefined or not ovirt_auth
      register: loggedin
      tags:
        - always

    - name: Get hosts
      ovirt_hosts_facts:
        auth: "{{ ovirt_auth }}"
        pattern: "cluster={{ cluster_name | mandatory }} {{ check_upgrade | ternary('', 'update_available=true') }} {{ host_names | map('regex_replace', '(.*)', 'name=\\1') | list | join(' or ') }} {{ host_statuses | map('regex_replace', '(.*)', 'status=\\1') | list | join(' or ') }}"
      check_mode: "no"

    - name: Check if there are hosts to be updated
      debug:
        msg: "No hosts to be updated"
      when: ovirt_hosts | length == 0

    - block:
        - include: cluster_policy.yml
          when: use_maintenance_policy

        - name: Get list of VMs in cluster
          ovirt_vms_facts:
            auth: "{{ ovirt_auth }}"
            pattern: "cluster={{ cluster_name }}"
          check_mode: "no"
          when: "stopped_vms is undefined"
   
        - name: Get list of VMs in cluster
          ovirt_vms_facts:
            auth: "{{ ovirt_auth }}"
            pattern: "cluster={{ cluster_name }} and status=up"
          check_mode: "no"
          register: list_of_vms
          when: "stopped_vms is defined and stopped_vms == '*'"


        - name: Shutdown VMs which can be stopped
          include: vms.yml
          loop_control:
                label: vms
          vars:
            vm:
              state: 'stopped'
              machines: "{{ ovirt_vms | default([]) | batch(vm_concurrency|int|default(1) ) | list  }}"
          with_items:
             - "{{vm}}"
          when: 
            - "ovirt_vms | default([]) | length > 0"

        - name: Shutdown VMs which can be stopped
          ovirt_vms:
            auth: "{{ ovirt_auth }}"
            state: stopped
            name: "{{ item }}"
            force: true
          with_items:
            - "{{ stopped_vms | default([]) }}"
          when: 
            - "stopped_vms is defined and stopped_vms != '*'" 
            - "stopped_vms | default([]) | length > 0"

        - include: pinned_vms.yml

        # Update only those hosts that aren't in list of hosts were VMs are pinned
        # or if stop_non_migratable_vms is enabled, which means we stop pinned VMs
        - include: upgrade.yml
          loop_control:
                loop_var: hosts
          with_items:
            - "{{ ovirt_hosts | batch(number_of_hosts_to_upgrade_concurrently|int|default(1) ) | list  }}"
          when: "hosts.id not in host_ids or stop_non_migratable_vms"

      when: ovirt_hosts | length > 0
      always:
        - name: Set original cluster policy
          ovirt_clusters:
            auth: "{{ ovirt_auth }}"
            name: "{{ cluster_name }}"
            scheduling_policy: "{{ cluster_scheduling_policy }}"
          when: use_maintenance_policy and cluster_policy.changed | default(false)


        - name: Start again stopped VMs
          include: vms.yml
          loop_control:
                label: vms
          vars:
            vm:
              state: 'running'
              machines: "{{ ovirt_vms | default([]) | batch(vm_concurrency|int|default(1) ) | list  }}"
          with_items:
             - "{{vm}}"
          when: 
            - "ovirt_vms | default([]) | length > 0"

        - name: Start again stopped VMs
          ovirt_vms:
            auth: "{{ ovirt_auth }}"
            state: running
            name: "{{ item }}"
            force: true
          with_items:
            - "{{ stopped_vms | default([]) }}"
          when: 
            - "stopped_vms is defined and stopped_vms != '*'" 
            - "stopped_vms | default([]) | length > 0"

        - name: Start again pin to host VMs
          ovirt_vms:
            auth: "{{ ovirt_auth }}"
            state: running
            name: "{{ item }}"
            force: true
          with_items:
            - "{{ pinned_vms_names | default([]) }}"
          when: "stop_non_migratable_vms" 

        # - name: Start again pin to host VMs
        #   include: vms.yml
        #   loop_control:
        #         loop_var: vms
        #   with_nested:
        #     - "{{ pinned_vms_names | batch(vm_concurrency|int|default(1) ) | list  }}"
        #     - 'running'
        #   when: 'stop_non_migratable_vms'
            

  always:
    - name: Logout from oVirt
      ovirt_auth:
        state: absent
        ovirt_auth: "{{ ovirt_auth }}"
      when: not loggedin.skipped | default(false)
      tags:
        - always
